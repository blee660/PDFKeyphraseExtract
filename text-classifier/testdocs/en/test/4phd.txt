In this thesis the usage of constraint-based layout in the field of user interface (UI) cus- tomization is explored. The constraint-based layout model is very powerful and can be used for many different kinds of layouts. However, it is also more complex than most other layout models, which makes it challenging for users to create sound layouts, i.e., layouts that are solvable and do not allow layout items to overlap. To leverage the constraint- based layout model for UI customization, we present methods that enable users to create and edit constraint-based layouts in a sound manner.To motivate why the constraint-based layout model is used in this work, it is compared to other layout models. In a user evaluation the usability of the constraint-based layout model was compared to the grid-bag layout model, which is also very powerful and likely the most commonly used model. Another evaluation investigated the aesthetic aspects of how available space in a layout should be best distributed among widgets.The first system for UI customization that we analyzed is Stack & Tile. It allows the user to stack and tile windows from a traditional desktop system into groups. Window groups are specified using the constraint-based layout model. A user evaluation showed that Stack & Tile substantially improves the work with multiple windows. Furthermore, we explored in a web survey how and if Stack & Tile is actually used by real users.The second system for UI customization targets the editing of constraint-based layouts at application runtime. A set of edit operations is developed that makes it easy to edit constraint-based layout in a sound manner. To evaluate these edit operations, we implemented them in a graphical user interface (GUI) builder, the Auckland Layout Editor (ALE). In a user study participants performed significantly faster for layout creation and layout editing tasks compared to other layout builders.Another contribution of this thesis is a new way to describe constraint-based layouts using a formal algebraic description for layout specifications. This algebra can be used to describe sound layout operations formally, i.e., operations that keep a layout solvable and non-overlapping. The edit operations used in Stack & Tile and ALE are then mapped to these algebraic operations.To investigate if and where UI customization is useful, a user evaluation was conducted.
This study covered layout as well as functional customization. For this a functional cus- tomization prototype was developed that allows changing the functionality and behavior of an application. The evaluation showed that users are keen to customize applications to their needs.